---
- name: Detect target machine architecture
  hosts: k8sdev, k8sdevlite, k8sdevdocker
  tasks:
    - name: Set global architecture variable based on target machine's architecture
      set_fact:
        target_mc_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}"
    - name: Display the architecture being set
      debug:
        msg: "Architecture for the target machine is set to: {{ target_mc_arch }}"

- name: docker dependencies installer
  hosts: k8sdev, k8sdevlite, k8sdevdocker
  become: true
  tasks:
  - name: install deps
    apt:
      name: "{{item}}"
      state: present
      update_cache: yes
    loop:
    - apt-transport-https
    - ca-certificates
    - curl
    - gnupg-agent
    - software-properties-common
    - lsb-release
  - name: Get the distribution codename
    command: lsb_release -sc
    register: lsb_codename
  - name: add official GPG key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
  - name: add apt repository for docker
    apt_repository:
      repo: "deb https://download.docker.com/linux/ubuntu {{ lsb_codename.stdout }} stable"
      state: present

- name: docker engine installer
  hosts: k8sdev, k8sdevdocker
  become: true
  tasks:
  - name: install docker
    apt:
      name: "{{item}}"
      state: latest
      update_cache: yes
    loop:
      - docker-ce
      - docker-compose-plugin
      - containerd.io
  - name: ensure docker service is running
    service:
      name: docker
      state: started
      enabled: yes
  - name: add ansible user to docker group
    user:
      name: "{{ ansible_user }}"
      groups: docker
      append: yes
  - name: allow insecure registries
    copy:
      content: '{"insecure-registries" : ["localhost:32000"]}'
      dest: /etc/docker/daemon.json
  - name: restart docker
    service:
      name: docker
      state: restarted

- name: docker client installer
  hosts: k8sdev, k8sdevlite, k8sdevdocker
  become: true
  tasks:
  - name: install docker client
    apt:
      name: "docker-ce-cli"
      state: latest
      update_cache: yes
      
- name: microk8s installer
  hosts: k8sdev
  become: yes
  tasks:
  - name: snap installer
    community.general.snap:
      name: microk8s
      classic: yes
  - name: pauser
    shell: 'microk8s status --wait-ready'
  - name: addons enabler
    shell: 'microk8s enable dns storage registry metrics-server'
  - name: ensure .kube dir exists
    file:
      path: "{{ ansible_env.HOME }}/.kube"
      state: directory
      mode: 0700
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
  - name: export kube config
    become: yes
    shell: 'microk8s.kubectl config view --raw > .kube/config'
  - name: ensure .kube/config has correct permissions
    file:
      path: "{{ ansible_env.HOME }}/.kube/config"
      mode: 0600
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"

- name: kubectl installer
  hosts: k8sdev, k8sdevlite, k8sdevdocker
  become: yes
  tasks:
  - name: snap installer
    community.general.snap:
      name: kubectl
      classic: yes
  - name: enable bash completion
    shell: 'kubectl completion bash >/etc/bash_completion.d/kubectl'

- name: sops installer
  hosts: k8sdev, k8sdevlite, k8sdevdocker
  tasks:
  - name: download sops
    get_url: 
      url: "https://github.com/getsops/sops/releases/download/v3.7.3/sops-v3.7.3.linux.{{ target_mc_arch }}"
      dest: /tmp/sops
  - name: copy to $PATH
    become: yes
    copy:
      src: /tmp/sops
      remote_src: yes
      dest: /usr/local/bin/
      mode: a+x
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"

- name: helm and helm plugins installer
  hosts: k8sdev, k8sdevlite, k8sdevdocker
  tasks:
  - name: snap installer
    become: yes
    community.general.snap:
      name: helm
      classic: yes
  - name: enable bash completion
    become: yes
    shell: 'helm completion bash >/etc/bash_completion.d/helm'
  - name: install helm-secrets plugin
    kubernetes.core.helm_plugin:
      plugin_path: https://github.com/jkroepke/helm-secrets
      state: present
- name: skaffold installer
  hosts: k8sdev, k8sdevlite, k8sdevdocker
  tasks:
  - name: download skaffold
    get_url: 
      url: "https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-{{ target_mc_arch }}"
      dest: /tmp/skaffold
  - name: copy to $PATH
    become: yes
    copy:
      src: /tmp/skaffold
      remote_src: yes
      dest: /usr/local/bin/
      mode: a+x
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
  - name: enable bash completion
    become: yes
    shell: 'skaffold completion bash >/etc/bash_completion.d/skaffold'

- name: Set default repo for skaffold to local microk8s
  hosts: k8sdev
  tasks:
  - name: set skaffold global environment variables
    lineinfile:
      path: "{{ ansible_env.HOME }}/.bashrc"
      regexp: 'export SKAFFOLD_.*'
      line: |
        export SKAFFOLD_INSECURE_REGISTRY=localhost:32000 SKAFFOLD_DEFAULT_REPO=localhost:32000

- name: k9s installer
  hosts: k8sdev, k8sdevlite, k8sdevdocker
  tasks:
  - name: download k9s
    become: yes
    unarchive:
      src: "https://github.com/derailed/k9s/releases/download/v0.32.5/k9s_Linux_{{ target_mc_arch }}.tar.gz"
      remote_src: yes
      dest: /usr/local/bin/
      extra_opts:
        - "--add-file"
        - "k9s"
      mode: a+x
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"

- name: azure-cli installer
  hosts: k8sdev, k8sdevlite, k8sdevdocker
  become: true
  tasks:
  - name: install deps
    apt:
      name: "{{item}}"
      state: present
      update_cache: yes
    loop:
    - apt-transport-https
    - ca-certificates
    - curl
    - gnupg-agent
    - software-properties-common
    - lsb-release
  - name: Get the distribution codename
    command: lsb_release -sc
    register: lsb_codename
  - name: add official GPG key
    apt_key:
      url: https://packages.microsoft.com/keys/microsoft.asc
      state: present
  - name: add apt repository for azure-cli
    apt_repository:
      repo: "deb https://packages.microsoft.com/repos/azure-cli/ {{ lsb_codename.stdout }} main"
      state: present
  - name: install azure-cli
    apt:
      name: azure-cli
      state: latest
      update_cache: yes

- name: kubelogin installer
  hosts: k8sdev, k8sdevlite, k8sdevdocker
  become: true
  tasks:
  - name: install kubectl (again) and kubelogin using azure-cli
    shell: 'az aks install-cli'

- name: awscli installer
  hosts: k8sdev, k8sdevlite, k8sdevdocker
  become: true
  tasks:
  - name: snap installer
    community.general.snap:
      name: aws-cli
      classic: yes
- name: ingress installer
  hosts: k8sdev
  tasks:
  - name: add ingress-nginx repo
    kubernetes.core.helm_repository:
      name: ingress-nginx
      repo_url: "https://kubernetes.github.io/ingress-nginx"
  - name: deploy ingress-nginx chart 
    kubernetes.core.helm:
      name: ingress-nginx
      chart_ref: ingress-nginx/ingress-nginx
      release_namespace: kube-system
      values:
        controller:
          service:
            type: NodePort
            nodePorts:
              http: 30080
              https: 30443

- name: kube-ps1 installer
  hosts: k8sdev, k8sdevlite, k8sdevdocker
  tasks:
  - name: git checkout
    git:
      repo: https://github.com/jonmosco/kube-ps1.git
      dest: "{{ ansible_env.HOME }}/.kube-ps1"
  - name: update .bashrc
    lineinfile:
      path: "{{ ansible_env.HOME }}/.bashrc"
      regexp: 'source \$HOME/\.kube-ps1.*'
      line: |
        source $HOME/.kube-ps1/kube-ps1.sh && PS1='\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\] $(kube_ps1)\$ '

- name: kubectx and kubens installer
  hosts: k8sdev, k8sdevlite, k8sdevdocker
  tasks:
  - name: git checkout
    git:
      repo: https://github.com/ahmetb/kubectx.git
      dest: "{{ ansible_env.HOME }}/.kubectx"
  - name: make kubectx script executable
    file:
      path: "{{ ansible_env.HOME }}/.kubectx/kubectx"
      mode: a+x
  - name: make kubens script executable
    file:
      path: "{{ ansible_env.HOME }}/.kubectx/kubens"
      mode: a+x
  - name: create kctx symbolic link
    become: yes
    file:
      src: "{{ ansible_env.HOME }}/.kubectx/kubectx"
      dest: /usr/local/bin/kctx
      state: link
  - name: create kns symbolic link
    become: yes
    file:
      src: "{{ ansible_env.HOME }}/.kubectx/kubens"
      dest: /usr/local/bin/kns
      state: link
  - name: enable auto-completion for kctx
    become: yes
    file:
      src: "{{ ansible_env.HOME }}/.kubectx/completion/kubectx.bash"
      dest: /etc/bash_completion.d/kctx
      state: link
  - name: enable auto-completion for kns
    become: yes
    file:
      src: "{{ ansible_env.HOME }}/.kubectx/completion/kubens.bash"
      dest: /etc/bash_completion.d/kns
      state: link

- name: tmux installer
  hosts: k8sdev, k8sdevlite, k8sdevdocker
  tasks:
  - name: install tmux
    become: yes
    apt:
      name: tmux
      state: present
      update_cache: yes
  - name: git checkout ohmytmux
    git:
      repo: https://github.com/gpakosz/.tmux.git
      dest: "{{ ansible_env.HOME }}/.tmux"
  - name: link configuration file in user home
    file:
      src: "{{ ansible_env.HOME }}/.tmux/.tmux.conf"
      dest: "{{ ansible_env.HOME }}/.tmux.conf"
      state: link
  - name: copy local configuration file to user home
    copy:
      src: "{{ ansible_env.HOME }}/.tmux/.tmux.conf.local"
      remote_src: yes
      dest: "{{ ansible_env.HOME }}/"

- name: apt cleaner
  hosts: k8sdev, k8sdevlite, k8sdevdocker
  tasks:
  - name: Remove dependencies that are no longer required and useless packages from the cache
    become: yes
    apt:
      autoremove: yes
      autoclean: true
